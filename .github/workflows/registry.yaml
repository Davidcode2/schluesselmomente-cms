name: Build and Push Docker Image to GHCR

on:
  push:
    branches:
      - main # This workflow runs when changes are pushed to the 'main' branch

env:
  # Define environment variables for the Docker image.
  # IMAGE_NAME will be derived from the GitHub repository name.
  # You can customize this if your image name should be different.
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    permissions:
      contents: read # Allows the workflow to read the repository content
      packages: write # Allows the workflow to publish packages (Docker images) to GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to checkout your repository code

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io # Specify the GitHub Container Registry
          username: ${{ github.actor }} # Use the GitHub actor (the user/bot that triggered the workflow)
          password: ${{ secrets.GITHUB_TOKEN }} # Use the automatically provided GITHUB_TOKEN for authentication

      - name: Set up Docker Buildx
        uses:
          docker/setup-buildx-action@v3 # This action sets up Buildx,
          # which is required for advanced features like caching
          # with the 'gha' type. It will create a builder instance
          # that supports the GitHub Actions cache backend.

      - name: Extract Docker metadata
        id: meta # Assign an ID to this step to reference its outputs later
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }} # Define the image name for metadata generation
          tags: |
            type=raw,value=latest,enable={{is_default_branch}} # Tag 'latest' only on the default branch (main)
            type=sha,prefix=sha-,suffix=,enable=true # Tag with the short Git SHA (e.g., sha-abcdef1)
            type=ref,event=branch # Tag with branch name (e.g., main)

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the current directory (repository root)
          push: true # Push the image to the registry
          file: dockerfile.prod
          tags: ${{ steps.meta.outputs.tags }} # Use the tags generated by the 'Extract Docker metadata' step
          labels: ${{ steps.meta.outputs.labels }} # Use the labels generated by the 'Extract Docker metadata' step
          cache-from: type=gha # Enable caching to speed up builds
          cache-to: type=gha,mode=max # Cache layers to GitHub Actions cache

      - name: Verify pushed images (Optional)
        run: |
          echo "Successfully pushed images to GHCR:"
          echo "${{ steps.meta.outputs.tags }}"
          # You can add more verification steps here, e.g., pulling the image to ensure it's accessible.
          
#  deploy:
#    runs-on: ubuntu-latest
#    steps:
#    - name: Check out repository code
#      uses: actions/checkout@v3
#
#    - name: Deploy to Staging server
#      uses: easingthemes/ssh-deploy@main
#      with:
#        SSH_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_SSH_KEY }}
#        ARGS: "-rlgoDzvc -i"
#        REMOTE_HOST: ${{ secrets.SERVER_ADDRESS }}
#        REMOTE_USER: ${{ secrets.USER_NAME }}
#        TARGET: /opt/$APP_NAME
#        EXCLUDE: "/dist/, /node_modules/"

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_PRIVATE_SSH_KEY }}

      - name: Deploy app to server
        run: |
          SERVER_USER="${{ secrets.USER_NAME }}"
          SERVER_IP="${{ secrets.SERVER_ADDRESS }}"
          APP_NAME="schluesselmomente-cms"
          DEPLOY_DIR="/opt/$APP_NAME"

          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "mkdir -p $DEPLOY_DIR"
          scp -o StrictHostKeyChecking=no ./docker-compose.prod.yml $SERVER_USER@$SERVER_IP:$DEPLOY_DIR/

          # Deploy .env securely
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << EOF
            echo "${{ secrets.APP_SECRETS_ENV_CONTENT }}" > $DEPLOY_DIR/.env
            chmod 600 $DEPLOY_DIR/.env
            cd $DEPLOY_DIR

            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker compose -f docker-compose.prod.yml pull 
            docker compose -f docker-compose.prod.yml up -d
            docker image prune -f
          EOF
        env:
          # Pass GITHUB_TOKEN as an environment variable for docker login inside SSH session
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



